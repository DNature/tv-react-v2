{"version":3,"sources":["api/historyProvider.ts","api/index.ts","components/ChartContainer.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["rp","RP","defaults","json","history","historyProvider","getBars","symbolInfo","resolution","from","to","first","limit","split_symbol","name","split","url","Number","qs","e","fsym","tsym","toTs","console","log","then","data","Response","Message","Data","length","time","Date","TimeFrom","toISOString","TimeTo","bars","map","el","volume","volumeFrom","lastBar","supportedResolutions","config","supported_resolutions","Datafeed","onReady","cb","setTimeout","searchSymbols","resolveSymbol","symbolName","onSymbolResolvedCallback","onResolveErrorCallback","split_data","symbol_stub","description","type","session","timzone","ticker","exchange","minmov","pricescale","has_intraday","intraday_multipliers","volume_precision","data_status","match","onHistoryCallback","onErrorCallback","firstDataRequest","noData","catch","err","subscribeBars","unsubscribeBars","calculateHistoryDepth","resolutionBack","intervalBack","undefined","getMarks","getTimeScaleMarks","getServerTime","getLanguageFromUrl","results","RegExp","exec","window","location","search","decodeURIComponent","replace","ChartContainer","props","React","useEffect","widgetOptions","debug","symbol","datafeed","interval","container_id","containerId","library_path","libraryPath","locale","disabled_features","enabled_features","charts_storage_url","chartsStorageUrl","charts_storage_api_version","chartsStorageApiVersion","client_id","clientId","user_id","userId","fullscreen","fullScreen","autosize","studies_overrides","studiesOverrides","_tvWidget","tvWidget","TradingView","widget","remove","datafeedUrl","className","id","defaultProps","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8a2367d9.chunk.js","sourcesContent":["import RP from 'request-promise';\n\nconst rp = RP.defaults({ json: true });\n\nconst api_root = 'https://min-api.cryptocompare.com';\nconst history: Record<string, any> = {};\n\nconst historyProvider = {\n\thistory: history,\n\tgetBars: (\n\t\tsymbolInfo: Record<string, any>,\n\t\tresolution: string | number,\n\t\tfrom?: string,\n\t\tto?: string,\n\t\tfirst?: any,\n\t\tlimit?: number\n\t) => {\n\t\tconst split_symbol = symbolInfo.name.split(/[:/]/);\n\t\tconst url =\n\t\t\tresolution === 'D'\n\t\t\t\t? '/data/histoday'\n\t\t\t\t: Number(resolution) >= 60\n\t\t\t\t? '/data/histohour'\n\t\t\t\t: '/data/histominute';\n\n\t\tconst qs = {\n\t\t\te: split_symbol[0],\n\t\t\tfsym: split_symbol[1],\n\t\t\ttsym: split_symbol[2],\n\t\t\ttoTs: to ? to : '',\n\t\t\tlimit: limit ? limit : 2000,\n\t\t\t// aggregate: 1//resolution\n\t\t};\n\t\tconsole.log({ qs });\n\n\t\treturn rp({\n\t\t\turl: `${api_root}${url}`,\n\t\t\tqs,\n\t\t}).then((data: any) => {\n\t\t\tconsole.log({ data });\n\t\t\tif (data.Response && data.Response === 'Error') {\n\t\t\t\tconsole.log('CryptoCompare API error:', data.Message);\n\t\t\t\treturn [];\n\t\t\t}\n\t\t\tif (data.Data.length) {\n\t\t\t\tconsole.log({\n\t\t\t\t\ttime: `${new Date(data.TimeFrom * 1000).toISOString()} - ${new Date(\n\t\t\t\t\t\tdata.TimeTo * 100\n\t\t\t\t\t).toISOString()}`,\n\t\t\t\t\tdata,\n\t\t\t\t});\n\n\t\t\t\tconst bars = data.Data.map((el: any) => ({\n\t\t\t\t\t...el,\n\t\t\t\t\ttime: el.time * 1000,\n\t\t\t\t\tvolume: el.volumeFrom,\n\t\t\t\t}));\n\n\t\t\t\tif (first) {\n\t\t\t\t\tconst lastBar = bars[bars.length - 1];\n\t\t\t\t\thistory[symbolInfo.name] = { lastBar };\n\t\t\t\t}\n\t\t\t\treturn bars;\n\t\t\t} else {\n\t\t\t\treturn [];\n\t\t\t}\n\t\t});\n\t},\n};\n\nexport default historyProvider;\n","import historyProvider from './historyProvider';\nconst supportedResolutions = [\n\t'1',\n\t'3',\n\t'5',\n\t'15',\n\t'30',\n\t'60',\n\t'120',\n\t'240',\n\t'D',\n];\n\nconst config = {\n\tsupported_resolutions: supportedResolutions,\n};\n\nconst Datafeed = {\n\tonReady: (cb: Function) => {\n\t\tconsole.log('===================== onReady runnint');\n\t\tsetTimeout(() => {\n\t\t\tcb(config);\n\t\t}, 0);\n\t},\n\tsearchSymbols: () => {\n\t\tconsole.log('===================== Search Symbols running');\n\t},\n\tresolveSymbol: (\n\t\tsymbolName: any,\n\t\tonSymbolResolvedCallback: Function,\n\t\tonResolveErrorCallback: Function\n\t) => {\n\t\tconsole.log('===================== resolveSymbol running');\n\n\t\tconst split_data = symbolName.split(/[:/]/);\n\t\tconst symbol_stub = {\n\t\t\tname: symbolName,\n\t\t\tdescription: '',\n\t\t\ttype: 'crypto',\n\t\t\tsession: '14x7',\n\t\t\ttimzone: 'Etc/UTC',\n\t\t\tticker: symbolName,\n\t\t\texchange: split_data[0],\n\t\t\tminmov: 1,\n\t\t\tpricescale: 100000000,\n\t\t\thas_intraday: true,\n\t\t\tintraday_multipliers: ['1', '60'],\n\t\t\tsupported_resolutions: supportedResolutions,\n\t\t\tvolume_precision: 8,\n\t\t\tdata_status: 'streaming',\n\t\t};\n\n\t\tif (split_data[2].match(/USD|EUR|JPY|AUD|GBP|KRW|CNY/)) {\n\t\t\tsymbol_stub.pricescale = 100;\n\t\t}\n\t\tsetTimeout(() => {\n\t\t\tonSymbolResolvedCallback(symbol_stub);\n\t\t}, 0);\n\t},\n\tgetBars: function (\n\t\tsymbolInfo: any,\n\t\tresolution: any,\n\t\tfrom: any,\n\t\tto: any,\n\t\tonHistoryCallback: any,\n\t\tonErrorCallback: any,\n\t\tfirstDataRequest: any\n\t) {\n\t\tconsole.log('=====getBars running');\n\n\t\thistoryProvider\n\t\t\t.getBars(symbolInfo, resolution, from, to, firstDataRequest)\n\t\t\t.then((bars) => {\n\t\t\t\tif (bars.length) {\n\t\t\t\t\tonHistoryCallback(bars, { noData: false });\n\t\t\t\t} else {\n\t\t\t\t\tonHistoryCallback(bars, { noData: true });\n\t\t\t\t}\n\t\t\t})\n\t\t\t.catch((err) => {\n\t\t\t\tconsole.log({ err });\n\t\t\t\tonErrorCallback(err);\n\t\t\t});\n\t},\n\tsubscribeBars: () => {\n\t\tconsole.log('=====subscribeBars runnning');\n\t},\n\tunsubscribeBars: () => {\n\t\tconsole.log('=====unsubscribeBars running');\n\t},\n\tcalculateHistoryDepth: (resolution: string | number) => {\n\t\t//optional\n\t\tconsole.log('=====calculateHistoryDepth running');\n\t\treturn resolution < 60\n\t\t\t? { resolutionBack: 'D', intervalBack: '1' }\n\t\t\t: undefined;\n\t},\n\tgetMarks: () => {\n\t\t//optional\n\t\tconsole.log('=====getMarks running');\n\t},\n\tgetTimeScaleMarks: () => {\n\t\t//optional\n\t\tconsole.log('=====getTimeScaleMarks running');\n\t},\n\tgetServerTime: () => {\n\t\tconsole.log('=====getServerTime running');\n\t},\n};\n\nexport default Datafeed;\n","import React from 'react';\nimport {\n\tChartingLibraryWidgetOptions as CLWOpts,\n\tLanguageCode,\n} from '../../public/charting_library/charting_library';\nimport Datafeed from '../api';\n\nexport interface ChartContainerProps {\n\tsymbol: CLWOpts['symbol'];\n\tinterval: CLWOpts['interval'];\n\tdatafeedUrl: string;\n\tlibraryPath: CLWOpts['library_path'];\n\tchartsStorageUrl: CLWOpts['charts_storage_url'];\n\tchartsStorageApiVersion: CLWOpts['charts_storage_api_version'];\n\tclientId: CLWOpts['client_id'];\n\tuserId: CLWOpts['user_id'];\n\tfullScreen: CLWOpts['fullscreen'];\n\tautosize: CLWOpts['autosize'];\n\tstudiesOverrides: CLWOpts['studies_overrides'];\n\tcontainerId: CLWOpts['container_id'];\n}\n\nexport interface ChartContainerState {}\n\nconst getLanguageFromUrl = (): LanguageCode | null => {\n\tconst regex = new RegExp('[\\\\?&]lang=([^&#]*)');\n\tconst results = regex.exec(window.location.search);\n\treturn results === null\n\t\t? null\n\t\t: (decodeURIComponent(results[1].replace(/\\+/g, ' ')) as LanguageCode);\n};\n\nexport const ChartContainer = (\n\tprops: Partial<ChartContainerProps> & ChartContainerState\n) => {\n\tReact.useEffect(() => {\n\t\tconst widgetOptions: CLWOpts = {\n\t\t\tdebug: true,\n\t\t\tsymbol: props.symbol,\n\t\t\tdatafeed: Datafeed as any,\n\t\t\tinterval: props.interval as CLWOpts['interval'],\n\t\t\tcontainer_id: props.containerId as CLWOpts['container_id'],\n\t\t\tlibrary_path: props.libraryPath,\n\t\t\tlocale: getLanguageFromUrl() || 'en',\n\t\t\tdisabled_features: ['use_localstorage_for_settings'],\n\t\t\tenabled_features: ['study_templates'],\n\t\t\tcharts_storage_url: props.chartsStorageUrl,\n\t\t\tcharts_storage_api_version: props.chartsStorageApiVersion,\n\t\t\tclient_id: props.clientId,\n\t\t\tuser_id: props.userId,\n\t\t\tfullscreen: props.fullScreen,\n\t\t\tautosize: props.autosize,\n\t\t\tstudies_overrides: props.studiesOverrides,\n\t\t};\n\n\t\t// const _tvWidget = new widget(widgetOptions);\n\t\tconst _tvWidget = ((window as any).tvWidget = new (\n\t\t\twindow as any\n\t\t).TradingView.widget(widgetOptions as any));\n\t\treturn () => {\n\t\t\tif (_tvWidget !== null) {\n\t\t\t\t_tvWidget.remove();\n\t\t\t}\n\t\t};\n\t}, [\n\t\tprops.datafeedUrl,\n\t\tprops.libraryPath,\n\t\tprops.chartsStorageUrl,\n\t\tprops.chartsStorageApiVersion,\n\t\tprops.clientId,\n\t\tprops.userId,\n\t\tprops.fullScreen,\n\t\tprops.autosize,\n\t\tprops.studiesOverrides,\n\t\tprops.symbol,\n\t\tprops.interval,\n\t\tprops.containerId,\n\t]);\n\n\treturn <div className='tv-chart-container' id={props.containerId} />;\n};\n\nChartContainer.defaultProps = {\n\tsymbol: 'Coinbase:BTC/USD',\n\tinterval: '15',\n\tcontainerId: 'tv_chart_container',\n\tlibraryPath: '/charting_library/', // FIXME: Require original path\n\tchartsStorageUrl: 'https://saveload.tradingview.com',\n\tchartsStorageApiVersion: '1.1',\n\tclientId: 'tradingview.com',\n\tuserId: 'public_user_id',\n\tfullscreen: false,\n\tautosize: true,\n\tstudiesOverrides: {},\n\tdatafeedUrl: 'https://demo_feed.tradingview.com',\n};\n","import React from 'react';\nimport './App.css';\nimport { ChartContainer } from './components/ChartContainer';\n\nfunction App() {\n\treturn (\n\t\t<div className='App'>\n\t\t\t<header className='App-header'>\n\t\t\t\t<h1>TradingView - CryptoCompare Chart</h1>\n\t\t\t</header>\n\t\t\t<div className='tv-wrapper'>\n\t\t\t\t<ChartContainer />\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}